# Generated by Django 4.1.2 on 2022-11-05 20:42

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FileUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_file', models.CharField(choices=[('sn', 'sn'), ('smeta', 'smeta'), ('spgz', 'spgz'), ('spgz_key', 'spgz_key'), ('tz', 'tz')], max_length=10)),
                ('type_update', models.CharField(choices=[('full', 'full'), ('add', 'add')], default='full', max_length=10)),
                ('file', models.FileField(upload_to='files')),
                ('date_upload', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Файл обновления справочника',
                'verbose_name_plural': 'Файлы обновления справочника',
            },
        ),
        migrations.CreateModel(
            name='KPGZ',
            fields=[
                ('code', models.CharField(max_length=250, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=2000)),
            ],
            options={
                'verbose_name': 'КПГЗ',
                'verbose_name_plural': 'КПГЗ',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='OKEI',
            fields=[
                ('code', models.CharField(max_length=250, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=2000)),
                ('short_name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'ОКЕИ',
                'verbose_name_plural': 'ОКЕИ',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='OKPD',
            fields=[
                ('code', models.CharField(max_length=250, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=2000)),
            ],
            options={
                'verbose_name': 'ОКПД',
                'verbose_name_plural': 'ОКПД',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='OKPD2',
            fields=[
                ('code', models.CharField(max_length=250, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=2000)),
            ],
            options={
                'verbose_name': 'ОКПД2',
                'verbose_name_plural': 'ОКПД2',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Smeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Без имени', max_length=1000)),
                ('address', models.CharField(default='Без адреса', max_length=1000)),
                ('type_ref', models.CharField(max_length=250, verbose_name='Тип сбоника')),
                ('advance', models.CharField(blank=True, max_length=250, null=True, verbose_name='Дополнение')),
                ('coef_ref', models.CharField(blank=True, max_length=250, null=True, verbose_name='Номер сборника')),
                ('coef_date', models.DateField(blank=True, null=True, verbose_name='Дата сборника')),
                ('sum', models.FloatField(default=0.0, verbose_name='Итого')),
                ('tax', models.FloatField(default=0.0, verbose_name='НДС')),
                ('sum_with_tax', models.FloatField(default=0.0, verbose_name='Итого с НДС')),
                ('sum_with_ko', models.FloatField(default=0.0, verbose_name='Итого с коэф. фин. обеспеч.')),
            ],
            options={
                'verbose_name': 'Смета',
                'verbose_name_plural': 'Сметы',
            },
        ),
        migrations.CreateModel(
            name='SmetaRow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default='', max_length=100, verbose_name='Шифр')),
                ('num', models.IntegerField(default=0, verbose_name='Номер п/п')),
                ('name', models.TextField(verbose_name='Наименование')),
                ('count', models.FloatField(default=0.0, verbose_name='Количество')),
                ('sum', models.FloatField(default=0.0, verbose_name='Итого')),
                ('ei', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.okei')),
            ],
            options={
                'verbose_name': 'Смета: Строка',
                'verbose_name_plural': 'Смета: Строки',
            },
        ),
        migrations.CreateModel(
            name='SmetaSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Без имени', max_length=250, verbose_name='Наименование')),
                ('sum', models.FloatField(default=0.0, verbose_name='Итого')),
                ('address', models.CharField(default='Без адреса', max_length=1000)),
                ('smeta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='core.smeta')),
            ],
            options={
                'verbose_name': 'Смета: Раздел',
                'verbose_name_plural': 'Смета: Разделы',
            },
        ),
        migrations.CreateModel(
            name='SN',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_ref', models.CharField(max_length=250, verbose_name='Тип сбоника')),
                ('advance', models.CharField(blank=True, max_length=250, null=True, verbose_name='Дополнение')),
                ('coef_ref', models.CharField(blank=True, max_length=250, null=True, verbose_name='Номер сборника')),
                ('coef_date', models.DateField(blank=True, null=True, verbose_name='Дата сборника')),
                ('sum', models.FloatField(default=0.0, verbose_name='Итого')),
                ('tax', models.FloatField(default=0.0, verbose_name='НДС')),
                ('sum_with_tax', models.FloatField(default=0.0, verbose_name='Итого с НДС')),
                ('sum_with_ko', models.FloatField(default=0.0, verbose_name='Итого с коэф. фин. обеспеч.')),
            ],
            options={
                'verbose_name': 'СН и ТСН',
                'verbose_name_plural': 'СН и ТСН',
            },
        ),
        migrations.CreateModel(
            name='SNRow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=100, verbose_name='Шифр')),
                ('num', models.IntegerField(default=0, verbose_name='Номер п/п')),
                ('name', models.TextField(verbose_name='Наименование')),
                ('count', models.FloatField(default=0.0, verbose_name='Количество')),
                ('sum', models.FloatField(default=0.0, verbose_name='Итого')),
                ('ei', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.okei')),
            ],
            options={
                'verbose_name': 'СН и ТСН: Строка',
                'verbose_name_plural': 'СН и ТСН: Строки',
            },
        ),
        migrations.CreateModel(
            name='SPGZ',
            fields=[
                ('id', models.IntegerField(default=0, primary_key=True, serialize=False)),
                ('name', models.TextField(verbose_name='Наименование')),
                ('key', models.CharField(blank=True, max_length=1000, null=True)),
                ('ei', models.ManyToManyField(related_name='spgz', to='core.okei')),
                ('kpgz', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spgz', to='core.kpgz')),
                ('okpd', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spgz', to='core.okpd')),
                ('okpd2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spgz', to='core.okpd2')),
            ],
            options={
                'verbose_name': 'СПГЗ',
                'verbose_name_plural': 'СПГЗ',
            },
        ),
        migrations.CreateModel(
            name='TZ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2000)),
            ],
            options={
                'verbose_name': 'ТЗ',
                'verbose_name_plural': 'ТЗ',
            },
        ),
        migrations.CreateModel(
            name='TZRow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kpgz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tz', to='core.kpgz')),
                ('spgz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tz', to='core.spgz')),
                ('tz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rows', to='core.tz')),
            ],
            options={
                'verbose_name': 'ТЗ: Строка',
                'verbose_name_plural': 'ТЗ: Строки',
            },
        ),
        migrations.CreateModel(
            name='SNSubRow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(verbose_name='Наименование')),
                ('count', models.FloatField(default=0.0, verbose_name='Количество')),
                ('amount', models.FloatField(default=1.0, verbose_name='Цена за единицу')),
                ('coef_correct', models.FloatField(default=1.0, verbose_name='Корректировочный коэф')),
                ('coef_winter', models.FloatField(default=1.0, verbose_name='Зимний коэф')),
                ('coef_recalc', models.FloatField(default=1.0, verbose_name='Коэф. пересчета')),
                ('sum_basic', models.FloatField(default=0.0, verbose_name='Затраты в базисном уровне')),
                ('sum_current', models.FloatField(default=0.0, verbose_name='Затраты в текущем уровне')),
                ('ei', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.okei')),
                ('sn_row', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subrows', to='core.snrow')),
            ],
            options={
                'verbose_name': 'СН и ТСН: Статья затрат',
                'verbose_name_plural': 'СН и ТСН: Статьи затрат',
            },
        ),
        migrations.CreateModel(
            name='SNSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Без имени', max_length=250, verbose_name='Наименование')),
                ('sn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='core.sn')),
            ],
            options={
                'verbose_name': 'СН и ТСН: Раздел',
                'verbose_name_plural': 'СН и ТСН: Разделы',
            },
        ),
        migrations.AddField(
            model_name='snrow',
            name='sn_section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rows', to='core.snsection'),
        ),
        migrations.CreateModel(
            name='SmetaSubsection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Без имени', max_length=250, verbose_name='Наименование')),
                ('sum', models.FloatField(default=0.0, verbose_name='Итого')),
                ('smeta_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subsections', to='core.smetasection')),
            ],
            options={
                'verbose_name': 'Смета: Подраздел',
                'verbose_name_plural': 'Смета: Подразделы',
            },
        ),
        migrations.CreateModel(
            name='SmetaSubRow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('material', 'material'), ('expanse', 'expanse')], default='expanse', max_length=20)),
                ('name', models.TextField(verbose_name='Наименование')),
                ('count', models.FloatField(default=0.0, verbose_name='Количество')),
                ('amount', models.FloatField(default=1.0, verbose_name='Цена за единицу')),
                ('coef_correct', models.FloatField(default=1.0, verbose_name='Корректировочный коэф')),
                ('coef_winter', models.FloatField(default=1.0, verbose_name='Зимний коэф')),
                ('coef_recalc', models.FloatField(default=1.0, verbose_name='Коэф. пересчета')),
                ('sum_basic', models.FloatField(default=0.0, verbose_name='Затраты в базисном уровне')),
                ('sum_current', models.FloatField(default=0.0, verbose_name='Затраты в текущем уровне')),
                ('ei', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.okei')),
                ('smeta_row', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subrows', to='core.smetarow')),
            ],
            options={
                'verbose_name': 'Смета: Статья затрат',
                'verbose_name_plural': 'Смета: Статьи затрат',
            },
        ),
        migrations.AddField(
            model_name='smetarow',
            name='smeta_subsection',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rows', to='core.smetasubsection'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=190, null=True)),
                ('last_name', models.CharField(blank=True, max_length=190, null=True)),
                ('username', models.CharField(max_length=150)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('verify_uuid', models.CharField(blank=True, max_length=36, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
